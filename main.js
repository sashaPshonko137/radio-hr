import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const AUDIO_DIR = path.join(__dirname, 'audio');
const PORT = 8000;

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
function getAudioFiles() {
  return fs.readdirSync(AUDIO_DIR)
    .filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.mp3', '.wav', '.ogg'].includes(ext);
    })
    .map(file => path.join(AUDIO_DIR, file));
}

// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  const url = req.url;

  if (url === '/stream.mp3' || url === '/stream.wav' || url === '/stream.ogg') {
    console.log('[–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å—Ç—Ä–∏–º—É');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ URL
    const format = path.extname(url).toLowerCase();
    const validFormats = ['.mp3', '.wav', '.ogg'];
    const contentType = {
      '.mp3': 'audio/mpeg',
      '.wav': 'audio/wav',
      '.ogg': 'audio/ogg'
    };

    if (!validFormats.includes(format)) {
      res.writeHead(400, { 'Content-Type': 'text/plain' });
      res.end('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .mp3, .wav, .ogg');
      return;
    }

    res.writeHead(200, {
      'Content-Type': contentType[format],
      'Transfer-Encoding': 'chunked',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
    });

    const files = getAudioFiles();
    if (files.length === 0) {
      console.error('–ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤!');
      res.end();
      return;
    }

    let index = 0;

    function sendNextFile() {
      const filePath = files[index];
      const readStream = fs.createReadStream(filePath);

      readStream.pipe(res, { end: false });

      readStream.on('end', () => {
        index = (index + 1) % files.length; // —Ü–∏–∫–ª
        console.log(`–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${path.basename(filePath)}. –°–ª–µ–¥—É—é—â–∏–π: ${path.basename(files[index])}`);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏—à–∏–Ω—É –∏–ª–∏ –ø–∞—É–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      });

      readStream.on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
        if (!res.finished) res.end();
      });
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    sendNextFile();

    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    req.on('close', () => {
      console.log('[–û—Ç–∫–ª—é—á–µ–Ω–∏–µ] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
      // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫
    });

  } else {
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(`
      <h1>Highrise Radio</h1>
      <p>–ü–æ–¥–∫–ª—é—á–∏ –≤ Highrise:</p>
      <code>http://—Ç–≤–æ–π-IP:${PORT}/stream.mp3</code>
      <br><br>
      <audio controls autoplay>
        <source src="/stream.mp3" type="audio/mpeg">
        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
      </audio>
    `);
  }
});

server.listen(PORT, () => {
  console.log(`
üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}
üéß –ü–æ–¥–∫–ª—é—á–∏ –≤ Highrise: http://—Ç–≤–æ–π-IP:${PORT}/stream.mp3
üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏: ${AUDIO_DIR}
`);
});