import { createConnection } from 'net';
import { createReadStream } from 'fs';
import { Buffer } from 'buffer';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
const ICECAST_HOST = 'localhost';
const ICECAST_PORT = 8000;
const MOUNT_POINT = '/highrise-radio.mp3';
const SOURCE_PASSWORD = 'hackme';
const AUDIO_FILE_PATH = './audio/baby-shark.mp3'; // –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É MP3 —Ñ–∞–π–ª—É
// =====================

const __dirname = dirname(fileURLToPath(import.meta.url));

console.log(`
üîä –ó–∞–ø—É—â–µ–Ω –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –ê–£–î–ò–û –≤ Icecast
=================================================
–•–æ—Å—Ç: ${ICECAST_HOST}
–ü–æ—Ä—Ç: ${ICECAST_PORT}
Mount point: ${MOUNT_POINT}
–ü–∞—Ä–æ–ª—å: ${SOURCE_PASSWORD}
–ê—É–¥–∏–æ—Ñ–∞–π–ª: ${AUDIO_FILE_PATH}
`);

// –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
console.log('\nüîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞');
try {
    const fs = await import('fs');
    const stats = fs.statSync(AUDIO_FILE_PATH);
    console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${stats.size} –±–∞–π—Ç`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ MP3
    const buffer = Buffer.alloc(3);
    const fd = fs.openSync(AUDIO_FILE_PATH, 'r');
    fs.readSync(fd, buffer, 0, 3, 0);
    fs.closeSync(fd);
    
    if (buffer.toString('hex') === '494433') {
        console.log('‚úÖ –§–æ—Ä–º–∞—Ç: MP3 (ID3 tag –Ω–∞–π–¥–µ–Ω)');
    } else {
        console.warn('‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ MP3. –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã:', buffer.toString('hex'));
    }
} catch (err) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${err.message}`);
    console.log(`
üí° –†–µ—à–µ–Ω–∏–µ:
1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:
   ffmpeg -f lavfi -i "sine=frequency=440:duration=10" -c:a libmp3lame test-audio.mp3

2. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É MP3 —Ñ–∞–π–ª—É –≤ AUDIO_FILE_PATH
`);
    process.exit(1);
}

// –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
console.log('\nüîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞');
const portCheck = new Promise((resolve) => {
    const socket = createConnection(ICECAST_PORT, ICECAST_HOST);
    
    socket.on('connect', () => {
        console.log('‚úÖ –ü–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        socket.end();
        resolve(true);
    });
    
    socket.on('error', (err) => {
        console.error(`‚ùå –ü–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err.message}`);
        resolve(false);
    });
});

const portOpen = await portCheck;
if (!portOpen) process.exit(1);

// –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Icecast —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
console.log('\nüîç –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Icecast');
let icecastSocket = null;
let icecastResponse = '';
let audioStream = null;
let bytesSent = 0;
let chunksSent = 0;

function connectToIcecast() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (icecastSocket) {
        icecastSocket.destroy();
        icecastSocket = null;
    }
    
    console.log('\nüîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
    icecastSocket = createConnection({
        host: ICECAST_HOST,
        port: ICECAST_PORT,
        timeout: 10000
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
    icecastSocket
        .on('connect', () => {
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const auth = Buffer.from(`source:${SOURCE_PASSWORD}`).toString('base64');
            const headers = [
                `SOURCE ${MOUNT_POINT} HTTP/1.0`,
                `Authorization: Basic ${auth}`,
                'Content-Type: audio/mpeg',
                'User-Agent: IcecastAudioTest/1.0',
                'Accept: */*',
                '',
                ''
            ].join('\r\n');
            
            console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏:');
            console.log('----------------------------------------');
            console.log(headers);
            console.log('----------------------------------------');
            
            icecastSocket.write(headers);
        })
        .on('data', (data) => {
            const chunk = data.toString();
            icecastResponse += chunk;
            
            console.log('\nüì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Icecast:');
            console.log('----------------------------------------');
            console.log(chunk);
            console.log('----------------------------------------');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
            if (icecastResponse.includes('\r\n\r\n')) {
                const statusLine = icecastResponse.split('\n')[0].trim();
                console.log(`\nüîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${statusLine}`);
                
                if (statusLine.includes('200 OK')) {
                    console.log('\nüéâ –£–°–ü–ï–•: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞!');
                    console.log('üîä –ì–û–¢–û–í–´ –û–¢–ü–†–ê–í–õ–Ø–¢–¨ –ê–£–î–ò–û...');
                    startAudioStream();
                } 
                else if (statusLine.includes('401 Unauthorized')) {
                    console.error('\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
                    showPasswordDebug();
                }
                else {
                    console.error(`\n‚ùå –û–®–ò–ë–ö–ê: ${statusLine}`);
                }
            }
        })
        .on('error', (err) => {
            console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', err.message);
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
            if (audioStream) audioStream.destroy();
        })
        .on('close', (hadError) => {
            console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', hadError ? '(—Å –æ—à–∏–±–∫–æ–π)' : '(–Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
            console.log(`üìä –ò—Ç–æ–≥–æ: ${chunksSent} —á–∞–Ω–∫–æ–≤, ${bytesSent} –±–∞–π—Ç`);
            
            if (hadError && icecastResponse) {
                console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç Icecast:');
                console.log(icecastResponse);
            }
        })
        .on('timeout', () => {
            console.error('\n‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            icecastSocket.destroy();
        });
}

function showPasswordDebug() {
    console.log(`
üí° –î–ï–ë–ê–ì –ü–ê–†–û–õ–Ø:
1. –ü–∞—Ä–æ–ª—å –≤ –∫–æ–¥–µ: "${SOURCE_PASSWORD}"
2. Base64 –∫–æ–¥–∏—Ä–æ–≤–∫–∞: ${Buffer.from(`source:${SOURCE_PASSWORD}`).toString('base64')}
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ icecast.xml:
   sudo grep "source-password" /etc/icecast2/icecast.xml
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ mount point —Å–æ–≤–ø–∞–¥–∞–µ—Ç:
   sudo grep -A 5 "mount-name" /etc/icecast2/icecast.xml
`);
}

function startAudioStream() {
    console.log('\nüéµ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è
    audioStream = createReadStream(AUDIO_FILE_PATH, {
        highWaterMark: 8192, // –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 8KB
        autoClose: true
    });
    
    let streamStarted = false;
    let firstChunk = true;
    
    audioStream
        .on('open', () => {
            console.log('‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è');
        })
        .on('data', (chunk) => {
            if (!streamStarted) {
                console.log('üîä –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö');
                streamStarted = true;
            }
            
            if (firstChunk) {
                console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º —á–∞–Ω–∫–µ:`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${chunk.length} –±–∞–π—Ç`);
                console.log(`   –ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç: ${chunk.slice(0, 20).toString('hex')}`);
                firstChunk = false;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ Icecast
            if (icecastSocket && icecastSocket.writable) {
                icecastSocket.write(chunk, (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–∞:', err.message);
                        return;
                    }
                    
                    bytesSent += chunk.length;
                    chunksSent++;
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —á–∞–Ω–∫–æ–≤
                    if (chunksSent % 10 === 0) {
                        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${chunksSent} —á–∞–Ω–∫–æ–≤, ${bytesSent} –±–∞–π—Ç`);
                    }
                });
            }
        })
        .on('end', () => {
            console.log('\nüèÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            console.log(`üìä –ò—Ç–æ–≥–æ: ${chunksSent} —á–∞–Ω–∫–æ–≤, ${bytesSent} –±–∞–π—Ç`);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (icecastSocket && icecastSocket.writable) {
                console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Icecast...');
                icecastSocket.end();
            }
        })
        .on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:', err.message);
            if (icecastSocket) icecastSocket.destroy();
        })
        .on('close', () => {
            console.log('‚úÖ –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç');
        });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Ç–æ–∫–∞
    audioStream.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞:', err.message);
    });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('\nüöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê...');
connectToIcecast();

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
setTimeout(() => {
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:');
    console.log(`Node.js: ${process.version}`);
    console.log(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform} ${process.arch}`);
    console.log(`–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${__dirname}`);
}, 1000);

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (icecastSocket && icecastSocket.readyState === 'open') {
        console.log(`\nüîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ...`);
    }
}, 5000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\nüõë –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç...');
    if (icecastSocket) icecastSocket.destroy();
    if (audioStream) audioStream.destroy();
    process.exit(0);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
setTimeout(async () => {
    try {
        const { exec } = await import('child_process');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Icecast
        exec('systemctl is-active icecast2', (err, stdout) => {
            if (stdout.trim() === 'active') {
                console.log('‚úÖ Icecast: –∞–∫—Ç–∏–≤–µ–Ω');
            } else {
                console.error('‚ùå Icecast: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ bind-address
        exec("grep 'bind-address' /etc/icecast2/icecast.xml", (err, stdout) => {
            console.log(`üåê bind-address: ${stdout.trim() || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        });
        
    } catch (err) {
        console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
}, 2000);