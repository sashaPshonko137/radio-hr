import { createConnection } from 'net';
import { Buffer } from 'buffer';

// ===== –ù–ê–°–¢–†–û–ô–ö–ò (–ò–ó–ú–ï–ù–ò–¢–ï –ü–û–î –°–í–û–ô –°–õ–£–ß–ê–ô) =====
const ICECAST_HOST = 'localhost';      // –û–±—ã—á–Ω–æ localhost
const ICECAST_PORT = 8000;             // –ü–æ—Ä—Ç –∏–∑ icecast.xml
const MOUNT_POINT = '/highrise-radio.mp3'; // Mount point
const SOURCE_PASSWORD = 'hackme';      // source-password –∏–∑ icecast.xml
// ================================================

console.log(`
üîç –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Icecast
-------------------------------------
–•–æ—Å—Ç: ${ICECAST_HOST}
–ü–æ—Ä—Ç: ${ICECAST_PORT}
Mount point: ${MOUNT_POINT}
–ü–∞—Ä–æ–ª—å: ${SOURCE_PASSWORD}
`);

// –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
console.log('\nüîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞');
const net = await import('net');
const portCheck = new Promise((resolve) => {
    const socket = net.createConnection(ICECAST_PORT, ICECAST_HOST);
    
    socket.on('connect', () => {
        console.log('‚úÖ –ü–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        socket.end();
        resolve(true);
    });
    
    socket.on('error', (err) => {
        console.error(`‚ùå –ü–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err.message}`);
        console.log(`
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. Icecast –Ω–µ –∑–∞–ø—É—â–µ–Ω: sudo systemctl status icecast2
2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç –≤ icecast.xml
3. –§–∞–µ—Ä–≤–æ–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç: sudo ufw allow ${ICECAST_PORT}
`);
        resolve(false);
    });
});

const portOpen = await portCheck;
if (!portOpen) process.exit(1);

// –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Icecast
console.log('\nüîç –®–∞–≥ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Icecast');
let icecastSocket = createConnection({
    host: ICECAST_HOST,
    port: ICECAST_PORT
});

// –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
let icecastResponse = '';

// –®–∞–≥ 3: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
icecastSocket
    .on('connect', () => {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const auth = Buffer.from(`source:${SOURCE_PASSWORD}`).toString('base64');
        const headers = [
            `SOURCE ${MOUNT_POINT} HTTP/1.0`,
            `Authorization: Basic ${auth}`,
            'Content-Type: audio/mpeg',
            'User-Agent: IcecastTestClient/1.0',
            '', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            ''  // –î–≤–æ–π–Ω–æ–π CRLF
        ].join('\r\n');
        
        console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏:');
        console.log('----------------------------------------');
        console.log(headers);
        console.log('----------------------------------------');
        
        icecastSocket.write(headers);
    })
    .on('data', (data) => {
        const chunk = data.toString();
        icecastResponse += chunk;
        
        console.log('\nüì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Icecast:');
        console.log('----------------------------------------');
        console.log(chunk);
        console.log('----------------------------------------');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (icecastResponse.includes('\r\n\r\n')) {
            const statusLine = icecastResponse.split('\n')[0].trim();
            console.log(`\nüîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${statusLine}`);
            
            if (statusLine.includes('200 OK')) {
                console.log('\nüéâ –£–°–ü–ï–•: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞!');
                console.log('üí° –¢–µ–ø–µ—Ä—å Icecast –æ–∂–∏–¥–∞–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫');
                console.log('‚ö†Ô∏è  –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
                setTimeout(() => {
                    console.log('\nüéµ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                    icecastSocket.write(Buffer.alloc(1024, 0)); // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                }, 1000);
            } 
            else if (statusLine.includes('401 Unauthorized')) {
                console.error('\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
                console.log(`
üí° –†–µ—à–µ–Ω–∏–µ:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ icecast.xml:
   sudo grep "source-password" /etc/icecast2/icecast.xml
   
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–¢ –ñ–ï –ø–∞—Ä–æ–ª—å
`);
            }
            else {
                console.error('\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç');
                console.log('–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –≤—ã–≤–æ–¥ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π Icecast');
            }
        }
    })
    .on('error', (err) => {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', err.message);
        console.log(`
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π mount point
2. Icecast –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SOURCE –º–µ—Ç–æ–¥
3. –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
4. Icecast –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω
`);
    })
    .on('close', (hadError) => {
        console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', hadError ? '(—Å –æ—à–∏–±–∫–æ–π)' : '(–Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
        
        if (hadError) {
            console.log(`
üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Icecast:
   sudo tail -f /var/log/icecast2/error.log
   
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:
   sudo cat /etc/icecast2/icecast.xml | grep -A 5 "<listen-socket>"
   
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª–∏:
   sudo cat /etc/icecast2/icecast.xml | grep -E "password|mount"
`);
        } else {
            console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        }
    });

// –®–∞–≥ 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
    if (icecastSocket && icecastSocket.writable) {
        console.log('\n‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
        icecastSocket.end();
    }
}, 5000);