import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ
import os from 'os';

import { parseFile } from 'music-metadata';
import { exec } from 'child_process';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const AUDIO_DIR = path.join(__dirname, 'audio');
const PORT = 8000;
const CACHE_DIR = path.join(__dirname, 'cache');

if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫—ç—à–∞: ${CACHE_DIR}`);
}

async function getCacheFileName(url) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º videoId –∏–∑ URL
    const videoIdMatch = url.match(/v=([a-zA-Z0-9_-]{11})/);
    
    if (videoIdMatch && videoIdMatch[1]) {
        return `youtube_${videoIdMatch[1]}.mp3`;
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç URL
    const crypto = await import('crypto');
    const hash = crypto.createHash('md5').update(url).digest('hex');
    return `track_${hash}.mp3`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
function getServerIP() {
    const interfaces = os.networkInterfaces();
    for (const interfaceName of Object.keys(interfaces)) {
        for (const iface of interfaces[interfaceName]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

const SERVER_IP = getServerIP();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ yt-dlp
// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ yt-dlp
async function checkYtDlp() {
    return new Promise((resolve) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
        const checkCommands = [
            'test -f ~/yt-dlp && echo "home"',
            'which yt-dlp 2>/dev/null && echo "system"',
            'test -f /usr/local/bin/yt-dlp && echo "local"'
        ];
        
        exec(checkCommands.join(' || '), (error, stdout) => {
            if (stdout && stdout.trim()) {
                const location = stdout.trim();
                console.log(`‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω (${location})`);
                resolve(true);
            } else {
                console.log('‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∞–π—Ç–µ:');
                console.log('wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O ~/yt-dlp');
                console.log('chmod +x ~/yt-dlp');
                resolve(false);
            }
        });
    });
}

async function safeDeleteFile(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ffmpeg
async function checkFfmpeg() {
    return new Promise((resolve) => {
        exec('which ffmpeg', (error) => {
            if (error) {
                console.log('‚ùå ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ffmpeg');
                resolve(false);
            } else {
                console.log('‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                resolve(true);
            }
        });
    });
}

// –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ YouTube
async function searchYouTube(trackName) {
    try {
        console.log(`üîç –ò—â–µ–º —Ç—Ä–µ–∫: "${trackName}"`);
        
        const searchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(trackName)}`;
        const response = await fetch(searchUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
            }
        });
        
        const html = await response.text();
        
        // –ò—â–µ–º videoId –≤ HTML
        const regex = /"videoId":"([^"]{11})"/;
        const match = html.match(regex);
        
        if (match && match[1]) {
            const videoId = match[1];
            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ: ${videoUrl}`);
            return videoUrl;
        }
        
        console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return null;
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ yt-dlp
async function downloadYouTubeTrack(videoUrl, trackName) {
    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
        const cacheFileName = await getCacheFileName(videoUrl);
        const cacheFilePath = path.join(CACHE_DIR, cacheFileName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (fs.existsSync(cacheFilePath)) {
            console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫: ${cacheFilePath}`);
            return cacheFilePath;
        }
        
        console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º: ${videoUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è yt-dlp
        const ytDlpCommand = fs.existsSync(path.join(os.homedir(), 'yt-dlp')) ? 
            path.join(os.homedir(), 'yt-dlp') : 'yt-dlp';
        
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è yt-dlp (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –∫—ç—à-–ø–∞–ø–∫—É)
        const command = `${ytDlpCommand} -x --audio-format mp3 --audio-quality 0 -o "${cacheFilePath}" "${videoUrl}"`;
        
        console.log(`‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
        
        return new Promise((resolve, reject) => {
            exec(command, { timeout: 120000 }, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
                    console.error('stderr:', stderr);
                    reject(error);
                    return;
                }
                
                console.log('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                if (fs.existsSync(cacheFilePath)) {
                    console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: ${cacheFilePath}`);
                    resolve(cacheFilePath);
                } else {
                    console.error('‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    reject(new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                }
            });
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:', error);
        throw error;
    }
}
async function scanDirectory(dir, isCached) {
    try {
        if (!fs.existsSync(dir)) {
            return [];
        }
        
        const files = fs.readdirSync(dir)
            .filter(file => {
                const ext = path.extname(file).toLowerCase();
                return ['.mp3', '.wav', '.ogg', '.m4a', '.flac'].includes(ext);
            })
            .map(file => path.join(dir, file));

        const filesWithDurations = [];
        
        for (const filePath of files) {
            try {
                const metadata = await parseFile(filePath);
                const durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
                
                filesWithDurations.push({
                    path: filePath,
                    duration: durationMs,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                });
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${filePath}:`, error);
                filesWithDurations.push({
                    path: filePath,
                    duration: 180000,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                });
            }
        }
        
        return filesWithDurations;
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${dir}:`, err);
        return [];
    }
}
function extractUrlFromCacheName(filePath) {
    const fileName = path.basename(filePath);
    
    // youtube_<videoId>.mp3
    const youtubeMatch = fileName.match(/youtube_([a-zA-Z0-9_-]{11})\.mp3/);
    if (youtubeMatch && youtubeMatch[1]) {
        return `https://www.youtube.com/watch?v=${youtubeMatch[1]}`;
    }
    
    return null;
}
// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
async function getAudioFilesWithDurations() {
    try {
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ
        const audioFiles = await scanDirectory(AUDIO_DIR, false);
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É –∫—ç—à–∞
        const cacheFiles = await scanDirectory(CACHE_DIR, true);
        
        const allFiles = [...audioFiles, ...cacheFiles];
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allFiles.length} —Ç—Ä–µ–∫–æ–≤ (${audioFiles.length} —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö, ${cacheFiles.length} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)`);
        
        return allFiles;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–æ–∫ —Å –∞—É–¥–∏–æ:', err);
        return [];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
let audioFilesCache = [];
let currentTrackIndex = 0; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å -1 –Ω–∞ 0
let trackStartTime = 0; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ Date.now(), —Ç–µ–ø–µ—Ä—å 0
let activeConnections = new Set();
let nextTrackTimeout = null; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏
let isPlaying = false; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
let playNextTrackFunction = null;

async function addTrackToQueue(trackName) {
    console.log(`üéµ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: "${trackName}"`);
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        const hasYtDlp = await checkYtDlp();
        if (!hasYtDlp) {
            throw new Error('yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        // –ò—â–µ–º —Ç—Ä–µ–∫ –Ω–∞ YouTube
        const videoUrl = await searchYouTube(trackName);
        if (!videoUrl) {
            console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
        const isDuplicate = audioFilesCache.some(track => 
            track.sourceUrl && track.sourceUrl === videoUrl
        );
        
        if (isDuplicate) {
            console.log(`‚ö†Ô∏è  –¢—Ä–µ–∫ —Å —ç—Ç–∏–º URL —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏: ${videoUrl}`);
            return false;
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
        const filePath = await downloadYouTubeTrack(videoUrl, trackName);
        if (!filePath) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫');
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let durationMs = 180000;
        try {
            const metadata = await parseFile(filePath);
            durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        }
        
        const newTrack = {
            path: filePath,
            duration: durationMs,
            name: path.basename(filePath, path.extname(filePath)),
            isDownloaded: true,
            sourceUrl: videoUrl
        };
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        let insertIndex;
        if (audioFilesCache.length === 0) {
            insertIndex = 0;
        } else {
            insertIndex = (currentTrackIndex + 1) % (audioFilesCache.length + 1);
        }
        
        audioFilesCache.splice(insertIndex, 0, newTrack);
        
        console.log(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é ${insertIndex + 1}: ${newTrack.name}`);
        console.log(`üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${videoUrl}`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø—É—Å—Ç–æ–π
        if (audioFilesCache.length === 1 && playNextTrackFunction) {
            console.log('‚ñ∂Ô∏è –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞');
            if (nextTrackTimeout) {
                clearTimeout(nextTrackTimeout);
                nextTrackTimeout = null;
            }
            playNextTrackFunction();
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', error);
        return false;
    }
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
getAudioFilesWithDurations().then(files => {
    audioFilesCache = files;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Ç—Ä–µ–∫–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏`);
    
    console.log('\nüéµ –ü–æ—Ä—è–¥–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:');
    audioFilesCache.forEach((track, index) => {
        console.log(`${index + 1}. ${track.name} (${Math.round(track.duration / 1000)} —Å–µ–∫)`);
    });
    
    startGlobalTrackTimer();
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤:', err);
});


// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —Ç—Ä–µ–∫–æ–≤
function startGlobalTrackTimer() {
    function playNextTrack() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
        if (nextTrackTimeout) {
            clearTimeout(nextTrackTimeout);
            nextTrackTimeout = null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        if (audioFilesCache.length === 0) {
            console.log('‚è∏Ô∏è  –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º —Ç—Ä–µ–∫–∏...');
            isPlaying = false;
            return;
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        if (currentTrackIndex < 0 || currentTrackIndex >= audioFilesCache.length) {
            currentTrackIndex = 0;
        }
        
        const track = audioFilesCache[currentTrackIndex];
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ track –≤—Å—ë –∂–µ undefined
        if (!track) {
            console.error('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏', currentTrackIndex);
            currentTrackIndex = 0;
            if (audioFilesCache.length > 0) {
                setTimeout(playNextTrack, 1000);
            }
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
        trackStartTime = Date.now();
        isPlaying = true;
        
        console.log(`\nüåê –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${track.name} (${Math.round(track.duration / 1000)} —Å–µ–∫)`);
        console.log(`üìä –í –æ—á–µ—Ä–µ–¥–∏: ${audioFilesCache.length} —Ç—Ä–µ–∫–æ–≤`);
        
        activeConnections.forEach(res => {
            if (!res.finished) {
                sendTrackFromPosition(res, track, 0);
            }
        });

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        nextTrackTimeout = setTimeout(() => {
            // –î–û–ë–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if (track.isDownloaded) {
                console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${track.name}`);
                audioFilesCache.splice(currentTrackIndex, 1);
                
                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç—Ä–µ–∫
                if (currentTrackIndex >= audioFilesCache.length && audioFilesCache.length > 0) {
                    currentTrackIndex = 0;
                }
            } else {
                // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
                currentTrackIndex = (currentTrackIndex + 1) % audioFilesCache.length;
            }
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            if (audioFilesCache.length === 0) {
                console.log('‚è∏Ô∏è  –û—á–µ—Ä–µ–¥—å –æ–ø—É—Å—Ç–µ–ª–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞');
                return;
            }
            
            // –î–û–ë–ê–í–õ–ï–ù–û: 3-—Å–µ–∫—É–Ω–¥–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–∫–æ–º
            console.log('‚è≥ 3-—Å–µ–∫—É–Ω–¥–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏...');
            setTimeout(() => {
                playNextTrack();
            }, 3000);
        }, track.duration);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
    playNextTrackFunction = playNextTrack;
    
    console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ`);
    playNextTrack();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
function sendTrackFromPosition(res, track, positionMs) {
    if (positionMs >= track.duration) {
        positionMs = 0;
    }

    if (!fs.existsSync(track.path)) {
        console.error(`‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${track.path}`);
        if (!res.finished) {
            res.end();
        }
        return;
    }

    const readStream = fs.createReadStream(track.path);
    
    if (positionMs > 0) {
        const bytesToSkip = Math.floor((positionMs / 1000) * 16000);
        let bytesSkipped = 0;
        
        readStream.on('data', (chunk) => {
            if (bytesSkipped < bytesToSkip) {
                bytesSkipped += chunk.length;
                if (bytesSkipped >= bytesToSkip) {
                    const remainingChunk = chunk.slice(bytesToSkip - (bytesSkipped - chunk.length));
                    if (remainingChunk.length > 0 && !res.finished) {
                        res.write(remainingChunk);
                    }
                }
            } else {
                if (!res.finished) {
                    res.write(chunk);
                }
            }
        });
    } else {
        readStream.pipe(res, { end: false });
    }

    readStream.on('end', () => {
        // –£–±—Ä–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫—ç—à
        // –ù–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if (!res.finished) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∏—à–∏–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            const silence = Buffer.alloc(16000, 0);
            res.write(silence);
        }
    });

    readStream.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞:', err);
        if (!res.finished) {
            res.end();
        }
    });
}

// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä
// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(async (req, res) => {
    // POST —Ä–æ—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    if (req.url === '/add' && req.method === 'POST') {
        let body = '';
        
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', async () => {
            try {
                const { track } = JSON.parse(body);
                
                if (!track) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞' }));
                    return;
                }
                
                console.log(`üì® POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: "${track}"`);
                
                // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                });
                
                res.end(JSON.stringify({ 
                    success: true, 
                    message: '–¢—Ä–µ–∫ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É' 
                }));
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É)
                setTimeout(async () => {
                    try {
                        const success = await addTrackToQueue(track);
                        console.log(success ? '‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞:', error);
                    }
                }, 100);
                
            } catch (error) {
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
        });
        
        return;
    }
        // OPTIONS –¥–ª—è CORS
    if (req.url === '/add' && req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        res.end();
        return;
    }

     // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
if (req.url === '/stream.mp3') {
    if (audioFilesCache.length === 0) {
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('–ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
        return;
    }

    console.log(`üéß –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (–≤—Å–µ–≥–æ: ${activeConnections.size + 1})`);
    activeConnections.add(res);

    res.writeHead(200, {
        'Content-Type': 'audio/mpeg',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Transfer-Encoding': 'chunked'
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
    let positionMs = 0;
    let currentTrack;
    
    if (isPlaying && trackStartTime > 0) {
        currentTrack = audioFilesCache[currentTrackIndex];
        const elapsed = Date.now() - trackStartTime;
        positionMs = Math.min(elapsed, currentTrack.duration - 1000);
    } else {
        // –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å, –∏–≥—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ —Å –Ω–∞—á–∞–ª–∞
        currentTrack = audioFilesCache[0];
        positionMs = 0;
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ currentTrack –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (!currentTrack) {
        currentTrack = audioFilesCache[0];
        positionMs = 0;
    }

    console.log(`üéß –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç. –ü–æ–∑–∏—Ü–∏—è: ${Math.round(positionMs/1000)} –∏–∑ ${Math.round(currentTrack.duration/1000)} —Å–µ–∫`);
    sendTrackFromPosition(res, currentTrack, positionMs);

    req.on('close', () => {
        console.log('üéß –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        activeConnections.delete(res);
    });

    res.on('finish', () => {
        activeConnections.delete(res);
    });

    return;
}

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
        <h1>üéß Highrise Radio</h1>
        <p>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ):</p>
        <input type="text" id="trackInput" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞">
        <button onclick="addTrack()">–î–æ–±–∞–≤–∏—Ç—å</button>
        <p id="status"></p>
        <audio controls>
            <source src="/stream.mp3" type="audio/mpeg">
        </audio>
        
        <script>
            async function addTrack() {
                const track = document.getElementById('trackInput').value;
                if (!track) return;
                
                const response = await fetch('/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ track })
                });
                
                const result = await response.json();
                document.getElementById('status').textContent = result.message;
            }
        </script>
    `);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}
üéß –ü–æ–¥–∫–ª—é—á–∏ –≤ Highrise: http://${SERVER_IP}:${PORT}/stream.mp3
‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫: POST http://${SERVER_IP}:${PORT}/add

üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏: ${AUDIO_DIR}
üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ IP: ${SERVER_IP}

üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏:
sudo apt update && sudo apt install yt-dlp ffmpeg
`);
});

process.on('SIGINT', () => {
    console.log('\nüõë –í—ã–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    activeConnections.forEach(res => {
        if (!res.finished) res.end();
    });
    process.exit(0);
});