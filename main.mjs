import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import os from 'os';
import { parseFile } from 'music-metadata';
import { exec } from 'child_process';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const AUDIO_DIR = path.join(__dirname, 'audio');
const PORT = 8000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
function getServerIP() {
    const interfaces = os.networkInterfaces();
    for (const interfaceName of Object.keys(interfaces)) {
        for (const iface of interfaces[interfaceName]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

const SERVER_IP = getServerIP();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ yt-dlp
async function checkYtDlp() {
    return new Promise((resolve) => {
        const checkCommands = [
            'test -f ~/yt-dlp && echo "home"',
            'which yt-dlp 2>/dev/null && echo "system"',
            'test -f /usr/local/bin/yt-dlp && echo "local"'
        ];
        
        exec(checkCommands.join(' || '), (error, stdout) => {
            if (stdout && stdout.trim()) {
                const location = stdout.trim();
                console.log(`‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω (${location})`);
                resolve(true);
            } else {
                console.log('‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∞–π—Ç–µ:');
                console.log('wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O ~/yt-dlp');
                console.log('chmod +x ~/yt-dlp');
                resolve(false);
            }
        });
    });
}

async function safeDeleteFile(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: ${filePath}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ffmpeg
async function checkFfmpeg() {
    return new Promise((resolve) => {
        exec('which ffmpeg', (error) => {
            if (error) {
                console.log('‚ùå ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ffmpeg');
                resolve(false);
            } else {
                console.log('‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                resolve(true);
            }
        });
    });
}

// –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ YouTube
async function searchYouTube(trackName) {
    try {
        console.log(`üîç –ò—â–µ–º —Ç—Ä–µ–∫: "${trackName}"`);
        
        const searchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(trackName)}`;
        const response = await fetch(searchUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
            }
        });
        
        const html = await response.text();
        const match = html.match(/"videoId":"([^"]{11})"/);
        
        if (match && match[1]) {
            const videoId = match[1];
            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ: ${videoUrl}`);
            return videoUrl;
        }
        
        console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return null;
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ yt-dlp
async function downloadYouTubeTrack(videoUrl, trackName) {
    return new Promise((resolve, reject) => {
        console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º: ${videoUrl}`);
        
        const safeName = trackName.replace(/[^a-zA-Z0-9]/g, '_').slice(0, 50);
        const outputTemplate = path.join(AUDIO_DIR, `${safeName}.%(ext)s`);
        
        const ytDlpCommand = fs.existsSync(path.join(os.homedir(), 'yt-dlp')) ? 
            path.join(os.homedir(), 'yt-dlp') : 'yt-dlp';
        
        const command = `${ytDlpCommand} -x --audio-format mp3 --audio-quality 0 -o "${outputTemplate}" "${videoUrl}"`;
        
        console.log(`‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
        
        exec(command, { timeout: 120000 }, (error, stdout, stderr) => {
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
                reject(error);
                return;
            }
            
            console.log('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            const files = fs.readdirSync(AUDIO_DIR);
            const newFile = files.find(f => f.startsWith(safeName) && f.endsWith('.mp3'));
            
            if (newFile) {
                const filePath = path.join(AUDIO_DIR, newFile);
                console.log(`üìÅ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${filePath}`);
                resolve(filePath);
            } else {
                reject(new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }
        });
    });
}

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
async function getAudioFilesWithDurations() {
    try {
        const files = fs.readdirSync(AUDIO_DIR)
            .filter(file => {
                const ext = path.extname(file).toLowerCase();
                return ['.mp3', '.wav', '.ogg', '.m4a', '.flac'].includes(ext);
            })
            .map(file => path.join(AUDIO_DIR, file));

        const filesWithDurations = [];
        
        for (const filePath of files) {
            try {
                const metadata = await parseFile(filePath);
                const durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
                
                filesWithDurations.push({
                    path: filePath,
                    duration: durationMs,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: false
                });
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${filePath}:`, error);
                filesWithDurations.push({
                    path: filePath,
                    duration: 180000,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: false
                });
            }
        }
        
        return filesWithDurations;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ audio:', err);
        return [];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let audioFilesCache = [];
let queueStartTime = Date.now(); // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
let activeConnections = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ)
async function addTrackToQueue(trackName) {
    console.log(`üéµ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: "${trackName}"`);
    
    try {
        const hasYtDlp = await checkYtDlp();
        if (!hasYtDlp) throw new Error('yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

        const videoUrl = await searchYouTube(trackName);
        if (!videoUrl) return false;

        const filePath = await downloadYouTubeTrack(videoUrl, trackName);
        if (!filePath) return false;

        let durationMs = 180000;
        try {
            const metadata = await parseFile(filePath);
            durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        }

        const newTrack = {
            path: filePath,
            duration: durationMs,
            name: path.basename(filePath, path.extname(filePath)),
            isDownloaded: true
        };

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ (–∏–Ω–¥–µ–∫—Å 1), –∏–ª–∏ –≤ –∫–æ–Ω–µ—Ü
        audioFilesCache.splice(1, 0, newTrack);
        console.log(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ: ${newTrack.name}`);

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
getAudioFilesWithDurations().then(files => {
    audioFilesCache = files;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Ç—Ä–µ–∫–æ–≤`);
    
    if (files.length > 0) {
        console.log('\nüéµ –û—á–µ—Ä–µ–¥—å:');
        files.forEach((f, i) => console.log(`${i+1}. ${f.name} (${Math.round(f.duration/1000)}—Å)`));
        startPlaybackLoop();
    } else {
        console.log('‚è∏Ô∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥—ë–º —Ç—Ä–µ–∫–∏...');
    }
}).catch(console.error);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
function startPlaybackLoop() {
    queueStartTime = Date.now();

    function playTrack(index) {
        if (audioFilesCache.length === 0) {
            setTimeout(() => startPlaybackLoop(), 5000);
            return;
        }

        const track = audioFilesCache[index];
        console.log(`\nüåê –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${track.name} (${Math.round(track.duration / 1000)}—Å)`);

        activeConnections.forEach(res => {
            if (!res.finished) {
                sendTrackFromPosition(res, track, 0);
            }
        });

        const nextIndex = (index + 1) % audioFilesCache.length;

        setTimeout(() => {
            playTrack(nextIndex);
        }, track.duration);
    }

    console.log('üöÄ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    playTrack(0);
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
function sendTrackFromPosition(res, track, positionMs) {
    if (positionMs >= track.duration) positionMs = 0;
    if (!fs.existsSync(track.path)) {
        if (!res.finished) res.end();
        return;
    }

    const startSeconds = (positionMs / 1000).toFixed(3);
    const ffmpeg = exec(`ffmpeg -ss ${startSeconds} -i "${track.path}" -f mp3 -`);

    res.writeHead(200, {
        'Content-Type': 'audio/mpeg',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Transfer-Encoding': 'chunked'
    });

    ffmpeg.stdout.pipe(res, { end: false });

    ffmpeg.on('close', (code) => {
        if (track.isDownloaded && code === 0) {
            setTimeout(() => safeDeleteFile(track.path), 1000);
        }
        if (!res.finished) res.end();
    });

    ffmpeg.stderr.on('data', () => {}); // –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ

    req.on('close', () => ffmpeg.kill());
}

// –°–µ—Ä–≤–µ—Ä
const server = http.createServer(async (req, res) => {
    if (req.url === '/add' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => body += chunk.toString());
        req.on('end', async () => {
            try {
                const { track } = JSON.parse(body);
                if (!track) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    return res.end(JSON.stringify({ success: false, message: '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è' }));
                }

                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                });
                res.end(JSON.stringify({ success: true, message: '–¢—Ä–µ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ' }));

                setTimeout(async () => {
                    await addTrackToQueue(track);
                }, 100);
            } catch (e) {
                res.writeHead(500).end('–û—à–∏–±–∫–∞');
            }
        });
        return;
    }

    if (req.url === '/add' && req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        return res.end();
    }

    if (req.url === '/stream.mp3') {
        if (audioFilesCache.length === 0) {
            res.writeHead(500).end('–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤');
            return;
        }

        console.log(`üéß –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç`);
        activeConnections.add(res);

        const now = Date.now();
        const elapsed = now - queueStartTime;

        let total = 0;
        let currentTrack = null;
        let positionInTrack = 0;

        for (const track of audioFilesCache) {
            if (elapsed < total + track.duration) {
                currentTrack = track;
                positionInTrack = elapsed - total;
                break;
            }
            total += track.duration;
        }

        if (!currentTrack) {
            const cyclePos = elapsed % total;
            total = 0;
            for (const track of audioFilesCache) {
                if (cyclePos < total + track.duration) {
                    currentTrack = track;
                    positionInTrack = cyclePos - total;
                    break;
                }
                total += track.duration;
            }
        }

        sendTrackFromPosition(res, currentTrack, positionInTrack);

        req.on('close', () => activeConnections.delete(res));
        res.on('finish', () => activeConnections.delete(res));
        return;
    }

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
        <h1>üéß Highrise Radio</h1>
        <p>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫:</p>
        <input type="text" id="trackInput" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ">
        <button onclick="addTrack()">–î–æ–±–∞–≤–∏—Ç—å</button>
        <p id="status"></p>
        <audio controls><source src="/stream.mp3" type="audio/mpeg"></audio>
        <script>
            async function addTrack() {
                const track = document.getElementById('trackInput').value;
                if (!track) return;
                const res = await fetch('/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ track })
                });
                const json = await res.json();
                document.getElementById('status').textContent = json.message;
            }
        </script>
    `);
});

// –ó–∞–ø—É—Å–∫
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}
üéß –°—Ç—Ä–∏–º: http://${SERVER_IP}:${PORT}/stream.mp3
‚ûï –î–æ–±–∞–≤–∏—Ç—å: POST http://${SERVER_IP}:${PORT}/add

üìÅ –ê—É–¥–∏–æ: ${AUDIO_DIR}
üåê IP: ${SERVER_IP}
`);
});

process.on('SIGINT', () => {
    console.log('\nüõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ...');
    activeConnections.forEach(res => res.end());
    process.exit();
});