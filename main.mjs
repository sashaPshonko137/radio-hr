import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import os from 'os';
import { setMaxListeners } from 'events';
import { parseFile } from 'music-metadata';
import { exec } from 'child_process';
import icecast from 'icecast';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const AUDIO_DIR = path.join(__dirname, 'audio');
const PORT = 8000;
const ICECAST_PORT = 8001;
const CACHE_DIR = path.join(__dirname, 'cache');

setMaxListeners(50);

if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫—ç—à–∞: ${CACHE_DIR}`);
}

async function getCacheFileName(url) {
    const videoIdMatch = url.match(/v=([a-zA-Z0-9_-]{11})/);
    
    if (videoIdMatch && videoIdMatch[1]) {
        return `youtube_${videoIdMatch[1]}.mp3`;
    }
    
    const crypto = await import('crypto');
    const hash = crypto.createHash('md5').update(url).digest('hex');
    return `track_${hash}.mp3`;
}

function getServerIP() {
    const interfaces = os.networkInterfaces();
    for (const interfaceName of Object.keys(interfaces)) {
        for (const iface of interfaces[interfaceName]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

const SERVER_IP = getServerIP();

async function checkYtDlp() {
    return new Promise((resolve) => {
        const checkCommands = [
            'test -f ~/yt-dlp && echo "home"',
            'which yt-dlp 2>/dev/null && echo "system"',
            'test -f /usr/local/bin/yt-dlp && echo "local"'
        ];
        
        exec(checkCommands.join(' || '), (error, stdout) => {
            if (stdout && stdout.trim()) {
                const location = stdout.trim();
                console.log(`‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω (${location})`);
                resolve(true);
            } else {
                console.log('‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∞–π—Ç–µ:');
                console.log('wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O ~/yt-dlp');
                console.log('chmod +x ~/yt-dlp');
                resolve(false);
            }
        });
    });
}

// –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ YouTube (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function searchYouTube(trackName) {
    try {
        console.log(`üîç –ò—â–µ–º —Ç—Ä–µ–∫: "${trackName}"`);
        
        const searchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(trackName)}`;
        const response = await fetch(searchUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
            }
        });
        
        const html = await response.text();
        
        const regex = /"videoId":"([^"]{11})"/;
        const match = html.match(regex);
        
        if (match && match[1]) {
            const videoId = match[1];
            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ: ${videoUrl}`);
            return videoUrl;
        }
        
        console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return null;
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ yt-dlp (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function downloadYouTubeTrack(videoUrl, trackName) {
    try {
        const cacheFileName = await getCacheFileName(videoUrl);
        const cacheFilePath = path.join(CACHE_DIR, cacheFileName);
        
        if (fs.existsSync(cacheFilePath)) {
            console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫: ${cacheFilePath}`);
            return cacheFilePath;
        }
        
        console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º: ${videoUrl}`);
        
        const ytDlpCommand = fs.existsSync(path.join(os.homedir(), 'yt-dlp')) ? 
            path.join(os.homedir(), 'yt-dlp') : 'yt-dlp';
        
        const command = `${ytDlpCommand} -x --audio-format mp3 --audio-quality 0 -o "${cacheFilePath}" "${videoUrl}"`;
        
        console.log(`‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
        
        return new Promise((resolve, reject) => {
            exec(command, { timeout: 120000 }, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
                    console.error('stderr:', stderr);
                    reject(error);
                    return;
                }
                
                console.log('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                
                if (fs.existsSync(cacheFilePath)) {
                    console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: ${cacheFilePath}`);
                    resolve(cacheFilePath);
                } else {
                    console.error('‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    reject(new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                }
            });
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:', error);
        throw error;
    }
}

async function scanDirectory(dir, isCached) {
    try {
        if (!fs.existsSync(dir)) {
            return [];
        }
        
        const files = fs.readdirSync(dir)
            .filter(file => {
                const ext = path.extname(file).toLowerCase();
                return ['.mp3', '.wav', '.ogg', '.m4a', '.flac'].includes(ext);
            })
            .map(file => path.join(dir, file));

        const filesWithDurations = [];
        
        for (const filePath of files) {
            try {
                const metadata = await parseFile(filePath);
                const durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
                
                filesWithDurations.push({
                    path: filePath,
                    duration: durationMs,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                });
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${filePath}:`, error);
                filesWithDurations.push({
                    path: filePath,
                    duration: 180000,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                });
            }
        }
        
        return filesWithDurations;
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${dir}:`, err);
        return [];
    }
}

function extractUrlFromCacheName(filePath) {
    const fileName = path.basename(filePath);
    
    const youtubeMatch = fileName.match(/youtube_([a-zA-Z0-9_-]{11})\.mp3/);
    if (youtubeMatch && youtubeMatch[1]) {
        return `https://www.youtube.com/watch?v=${youtubeMatch[1]}`;
    }
    
    return null;
}

async function getAudioFilesWithDurations() {
    try {
        const audioFiles = await scanDirectory(AUDIO_DIR, false);
        return audioFiles;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–æ–∫ —Å –∞—É–¥–∏–æ:', err);
        return [];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
let audioFilesCache = [];
let currentTrackIndex = 0;
let icecastStream = null;
let isStreaming = false;
let nextTrackTimeout = null;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Icecast
function connectToIcecast() {
    try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (icecastStream) {
            icecastStream.end();
            icecastStream = null;
        }
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Icecast –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫
        icecastStream = icecast.write(`http://localhost:${ICECAST_PORT}/highrise-radio.mp3`, {
            user: 'source',
            pass: 'hackme', // –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Icecast
            headers: {
                'Content-Type': 'audio/mpeg'
            }
        });
        
        icecastStream.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Icecast');
            isStreaming = true;
        });
        
        icecastStream.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Icecast:', err);
            isStreaming = false;
            setTimeout(connectToIcecast, 5000);
        });
        
        icecastStream.on('close', () => {
            console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Icecast –∑–∞–∫—Ä—ã—Ç–æ');
            isStreaming = false;
            setTimeout(connectToIcecast, 5000);
        });
        
        return icecastStream;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Icecast:', error);
        isStreaming = false;
        setTimeout(connectToIcecast, 5000);
        return null;
    }
}

async function addTrackToQueue(trackName) {
    console.log(`üéµ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: "${trackName}"`);
    
    try {
        const hasYtDlp = await checkYtDlp();
        if (!hasYtDlp) {
            throw new Error('yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        const videoUrl = await searchYouTube(trackName);
        if (!videoUrl) {
            console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç URL –≤ –æ—á–µ—Ä–µ–¥—å
        const isDuplicateInQueue = audioFilesCache.some(track => 
            track.sourceUrl && track.sourceUrl === videoUrl
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –∫—ç—à–µ
        const cacheFileName = await getCacheFileName(videoUrl);
        const cacheFilePath = path.join(CACHE_DIR, cacheFileName);
        const isAlreadyCached = fs.existsSync(cacheFilePath);
        
        if (isDuplicateInQueue) {
            console.log(`‚ö†Ô∏è  –¢—Ä–µ–∫ —Å —ç—Ç–∏–º URL —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏: ${videoUrl}`);
            return false;
        }
        
        if (isAlreadyCached) {
            console.log(`‚úÖ –¢—Ä–µ–∫ —É–∂–µ –≤ –∫—ç—à–µ: ${cacheFilePath}`);
        }
        
        const filePath = await downloadYouTubeTrack(videoUrl, trackName);
        if (!filePath) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫');
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let durationMs = 180000;
        try {
            const metadata = await parseFile(filePath);
            durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        }
        
        const newTrack = {
            path: filePath,
            duration: durationMs,
            name: path.basename(filePath, path.extname(filePath)),
            isDownloaded: true,
            sourceUrl: videoUrl
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        let insertIndex;
        if (audioFilesCache.length === 0) {
            insertIndex = 0;
        } else {
            insertIndex = (currentTrackIndex + 1) % (audioFilesCache.length + 1);
        }
        
        audioFilesCache.splice(insertIndex, 0, newTrack);
        
        console.log(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é ${insertIndex + 1}: ${newTrack.name}`);
        console.log(`üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${videoUrl}`);
        
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if (!isStreaming && audioFilesCache.length > 0) {
            console.log('‚ñ∂Ô∏è –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞');
            playNextTrack();
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
function playNextTrack() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (nextTrackTimeout) {
        clearTimeout(nextTrackTimeout);
        nextTrackTimeout = null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    if (audioFilesCache.length === 0) {
        console.log('‚è∏Ô∏è  –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º —Ç—Ä–µ–∫–∏...');
        isStreaming = false;
        return;
    }
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    if (currentTrackIndex < 0 || currentTrackIndex >= audioFilesCache.length) {
        currentTrackIndex = 0;
    }
    
    const track = audioFilesCache[currentTrackIndex];
    
    if (!track) {
        console.error('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏', currentTrackIndex);
        currentTrackIndex = 0;
        if (audioFilesCache.length > 0) {
            setTimeout(playNextTrack, 1000);
        }
        return;
    }
    
    console.log(`\nüåê –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${track.name} (${Math.round(track.duration / 1000)} —Å–µ–∫)`);
    console.log(`üìä –í –æ—á–µ—Ä–µ–¥–∏: ${audioFilesCache.length} —Ç—Ä–µ–∫–æ–≤`);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Icecast, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (!icecastStream || !isStreaming) {
        connectToIcecast();
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ Icecast
    if (icecastStream && isStreaming) {
        const readStream = fs.createReadStream(track.path);
        
        readStream.pipe(icecastStream, { end: false });
        
        readStream.on('end', () => {
            console.log(`‚èπÔ∏è  –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${track.name}`);
            
            // –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if (track.isDownloaded) {
                console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${track.name}`);
                audioFilesCache.splice(currentTrackIndex, 1);
                
                // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞, —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
                if (currentTrackIndex >= audioFilesCache.length && audioFilesCache.length > 0) {
                    currentTrackIndex = 0;
                }
            } else {
                // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
                currentTrackIndex = (currentTrackIndex + 1) % audioFilesCache.length;
            }
            
            // 3-—Å–µ–∫—É–Ω–¥–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏
            console.log('‚è≥ 3-—Å–µ–∫—É–Ω–¥–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏...');
            nextTrackTimeout = setTimeout(playNextTrack, 3000);
        });
        
        readStream.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ –≤ Icecast:', err);
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            if (track.isDownloaded) {
                audioFilesCache.splice(currentTrackIndex, 1);
            } else {
                currentTrackIndex = (currentTrackIndex + 1) % audioFilesCache.length;
            }
            nextTrackTimeout = setTimeout(playNextTrack, 1000);
        });
    } else {
        // –ï—Å–ª–∏ Icecast –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        console.log('‚ö†Ô∏è  Icecast –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥');
        nextTrackTimeout = setTimeout(playNextTrack, 5000);
    }
}

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(async (req, res) => {
    // POST —Ä–æ—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    if (req.url === '/add' && req.method === 'POST') {
        let body = '';
        
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', async () => {
            try {
                const { track } = JSON.parse(body);
                
                if (!track) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞' }));
                    return;
                }
                
                console.log(`üì® POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: "${track}"`);
                
                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                });
                
                res.end(JSON.stringify({ 
                    success: true, 
                    message: '–¢—Ä–µ–∫ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É' 
                }));
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
                setTimeout(async () => {
                    try {
                        const success = await addTrackToQueue(track);
                        console.log(success ? '‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞:', error);
                    }
                }, 100);
                
            } catch (error) {
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
        });
        
        return;
    }
    
    // OPTIONS –¥–ª—è CORS
    if (req.url === '/add' && req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        res.end();
        return;
    }

    // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Icecast
    if (req.url === '/stream.mp3') {
        const icecastUrl = `http://${SERVER_IP}:${ICECAST_PORT}/highrise-radio.mp3`;
        
        console.log(`üéß –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ Icecast: ${icecastUrl}`);
        
        // 302 —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ Icecast
        res.writeHead(302, {
            'Location': icecastUrl,
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive'
        });
        res.end();
        
        return;
    }

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
        <h1>üéß Highrise Radio</h1>
        <p>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ):</p>
        <input type="text" id="trackInput" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞">
        <button onclick="addTrack()">–î–æ–±–∞–≤–∏—Ç—å</button>
        <p id="status"></p>
        <audio controls>
            <source src="/stream.mp3" type="audio/mpeg">
        </audio>
        
        <script>
            async function addTrack() {
                const track = document.getElementById('trackInput').value;
                if (!track) return;
                
                const response = await fetch('/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ track })
                });
                
                const result = await response.json();
                document.getElementById('status').textContent = result.message;
            }
        </script>
    `);
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
getAudioFilesWithDurations().then(files => {
    audioFilesCache = files;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤`);
    
    console.log('\nüéµ –ü–æ—Ä—è–¥–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:');
    audioFilesCache.forEach((track, index) => {
        console.log(`${index + 1}. ${track.name} (${Math.round(track.duration / 1000)} —Å–µ–∫)`);
    });
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Icecast
    connectToIcecast();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–∫–∏
    if (audioFilesCache.length > 0) {
        console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
        playNextTrack();
    }
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤:', err);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}
üéß –ü–æ–¥–∫–ª—é—á–∏ –≤ Highrise: http://${SERVER_IP}:${ICECAST_PORT}/highrise-radio.mp3
‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫: POST http://${SERVER_IP}:${PORT}/add

üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏: ${AUDIO_DIR}
üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ IP: ${SERVER_IP}

üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏:
sudo apt update && sudo apt install icecast2 yt-dlp ffmpeg

‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Icecast (—Ñ–∞–π–ª /etc/icecast2/icecast.xml):
- source-password: hackme
- –ü–æ—Ä—Ç: ${ICECAST_PORT}
- Mount point: /highrise-radio.mp3
`);
});

process.on('SIGINT', () => {
    console.log('\nüõë –í—ã–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Icecast
    if (icecastStream) {
        icecastStream.end();
    }
    
    process.exit(0);
});