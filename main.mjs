import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import os from 'os';
import { parseFile } from 'music-metadata';
import { exec } from 'child_process';
import { createConnection } from 'net';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const AUDIO_DIR = path.join(__dirname, 'audio');
const PORT = 8008;
const ICECAST_PORT = 8000;
const CACHE_DIR = path.join(__dirname, 'cache');
const ICECAST_PASSWORD = 'hackme'; // –ï–î–ò–ù–´–ô –ü–ê–†–û–õ–¨

let icecastSocket = null;
let icecastConnected = false;
let audioFilesCache = [];
let currentTrackIndex = 0;
let isStreaming = false;

if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫—ç—à–∞: ${CACHE_DIR}`);
}

function getServerIP() {
    const interfaces = os.networkInterfaces();
    for (const interfaceName of Object.keys(interfaces)) {
        for (const iface of interfaces[interfaceName]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

const SERVER_IP = getServerIP();

async function getCacheFileName(url) {
    const videoIdMatch = url.match(/v=([a-zA-Z0-9_-]{11})/);
    
    if (videoIdMatch && videoIdMatch[1]) {
        return `youtube_${videoIdMatch[1]}.mp3`;
    }
    
    const crypto = await import('crypto');
    const hash = crypto.createHash('md5').update(url).digest('hex');
    return `track_${hash}.mp3`;
}

async function checkYtDlp() {
    return new Promise((resolve) => {
        const checkCommands = [
            'test -f ~/yt-dlp && echo "home"',
            'which yt-dlp 2>/dev/null && echo "system"',
            'test -f /usr/local/bin/yt-dlp && echo "local"'
        ];
        
        exec(checkCommands.join(' || '), (error, stdout) => {
            if (stdout && stdout.trim()) {
                const location = stdout.trim();
                console.log(`‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω (${location})`);
                resolve(true);
            } else {
                console.log('‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∞–π—Ç–µ:');
                console.log('wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O ~/yt-dlp');
                console.log('chmod +x ~/yt-dlp');
                resolve(false);
            }
        });
    });
}

async function searchYouTube(trackName) {
    try {
        console.log(`üîç –ò—â–µ–º —Ç—Ä–µ–∫: "${trackName}"`);
        
        const searchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(trackName)}`;
        const response = await fetch(searchUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
            }
        });
        
        const html = await response.text();
        
        const regex = /"videoId":"([^"]{11})"/;
        const match = html.match(regex);
        
        if (match && match[1]) {
            const videoId = match[1];
            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ: ${videoUrl}`);
            return videoUrl;
        }
        
        console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return null;
    }
}

async function downloadYouTubeTrack(videoUrl, trackName) {
    try {
        const cacheFileName = await getCacheFileName(videoUrl);
        const cacheFilePath = path.join(CACHE_DIR, cacheFileName);
        
        if (fs.existsSync(cacheFilePath)) {
            console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫: ${cacheFilePath}`);
            return cacheFilePath;
        }
        
        console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º: ${videoUrl}`);
        
        const ytDlpCommand = fs.existsSync(path.join(os.homedir(), 'yt-dlp')) ? 
            path.join(os.homedir(), 'yt-dlp') : 'yt-dlp';
        
        const command = `${ytDlpCommand} -x --audio-format mp3 --audio-quality 0 -o "${cacheFilePath}" "${videoUrl}"`;
        
        console.log(`‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
        
        return new Promise((resolve, reject) => {
            exec(command, { timeout: 120000 }, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
                    console.error('stderr:', stderr);
                    reject(error);
                    return;
                }
                
                console.log('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                
                if (fs.existsSync(cacheFilePath)) {
                    console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: ${cacheFilePath}`);
                    resolve(cacheFilePath);
                } else {
                    console.error('‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    reject(new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                }
            });
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:', error);
        throw error;
    }
}

async function scanDirectory(dir, isCached) {
    try {
        if (!fs.existsSync(dir)) {
            return [];
        }
        
        const files = fs.readdirSync(dir)
            .filter(file => {
                const ext = path.extname(file).toLowerCase();
                return ['.mp3', '.wav', '.ogg', '.m4a', '.flac'].includes(ext);
            })
            .map(file => path.join(dir, file));

        const filesWithDurations = [];
        
        for (const filePath of files) {
            try {
                const metadata = await parseFile(filePath);
                const durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
                
                filesWithDurations.push({
                    path: filePath,
                    duration: durationMs,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                });
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${filePath}:`, error);
                filesWithDurations.push({
                    path: filePath,
                    duration: 180000,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                });
            }
        }
        
        return filesWithDurations;
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${dir}:`, err);
        return [];
    }
}

function extractUrlFromCacheName(filePath) {
    const fileName = path.basename(filePath);
    
    const youtubeMatch = fileName.match(/youtube_([a-zA-Z0-9_-]{11})\.mp3/);
    if (youtubeMatch && youtubeMatch[1]) {
        return `https://www.youtube.com/watch?v=${youtubeMatch[1]}`;
    }
    
    return null;
}

async function getAudioFilesWithDurations() {
    const staticFiles = await scanDirectory(AUDIO_DIR, false);
    const cachedFiles = await scanDirectory(CACHE_DIR, true);
    return [...staticFiles, ...cachedFiles];
}

// –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–¢–û–ö–ê
function connectToIcecast() {
    if (icecastSocket) {
        icecastSocket.destroy();
        icecastSocket = null;
    }
    
    console.log(`üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Icecast: localhost:${ICECAST_PORT}`);
    
    icecastSocket = createConnection({
        host: 'localhost',
        port: ICECAST_PORT
    });
    
    let icecastResponse = '';
    
    icecastSocket.on('data', (data) => {
        icecastResponse += data.toString();
        
        if (icecastResponse.includes('\r\n\r\n')) {
            console.log(`üì® –û—Ç–≤–µ—Ç –æ—Ç Icecast: ${icecastResponse.split('\n')[0].trim()}`);
            
            if (icecastResponse.includes('200 OK')) {
                console.log('üéâ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Icecast');
                icecastConnected = true;
                isStreaming = true;
                
                // –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–¢–û–ö –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
                sendTrackToIcecast();
            } 
            else if (icecastResponse.includes('401 Unauthorized')) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
                console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –∫–æ–¥–µ –∏ –∫–æ–Ω—Ñ–∏–≥–µ Icecast');
                icecastConnected = false;
                isStreaming = false;
                icecastSocket.destroy();
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
                setTimeout(connectToIcecast, 5000);
            }
        }
    });
    
    icecastSocket.on('error', (err) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Icecast: ${err.message}`);
        icecastConnected = false;
        isStreaming = false;
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setTimeout(connectToIcecast, 5000);
    });
    
    icecastSocket.on('close', (hadError) => {
        console.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Icecast –∑–∞–∫—Ä—ã—Ç–æ ${hadError ? '(—Å –æ—à–∏–±–∫–æ–π)' : '(–Ω–æ—Ä–º–∞–ª—å–Ω–æ)'}`);
        icecastConnected = false;
        isStreaming = false;
        
        // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        if (!hadError && audioFilesCache.length > 0) {
            setTimeout(connectToIcecast, 2000);
        }
    });
    
    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Æ –ü–û–°–õ–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    icecastSocket.on('connect', () => {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Icecast —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        const headers = [
            `SOURCE /highrise-radio.mp3 HTTP/1.0`,
            `Authorization: Basic ${Buffer.from(`source:${ICECAST_PASSWORD}`).toString('base64')}`,
            `Content-Type: audio/mpeg`,
            `User-Agent: HighriseRadio/1.0`,
            ``
        ].join('\r\n');
        
        icecastSocket.write(headers);
    });
    
    return icecastSocket;
}

// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–î–ù–û –°–û–ï–î–ò–ù–ï–ù–ò–ï –ù–ê –í–°–Æ –û–ß–ï–†–ï–î–¨
function sendTrackToIcecast() {
    if (!audioFilesCache.length) {
        console.log('‚è∏Ô∏è  –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫');
        isStreaming = false;
        
        // –ó–ê–ö–†–´–í–ê–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï –¢–û–õ–¨–ö–û –ü–†–ò –ü–£–°–¢–û–ô –û–ß–ï–†–ï–î–ò
        if (icecastSocket) {
            icecastSocket.end();
            icecastSocket = null;
        }
        
        return;
    }
    
    // –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú –ò–ù–î–ï–ö–°
    if (currentTrackIndex >= audioFilesCache.length) {
        currentTrackIndex = 0;
    }
    
    const track = audioFilesCache[currentTrackIndex];
    console.log(`\nüåê –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–µ–∫–∞: ${track.name} (${Math.round(track.duration / 1000)} —Å–µ–∫)`);
    
    const readStream = fs.createReadStream(track.path);
    
    // –ü–ï–†–ï–î–ê–ï–ú –î–ê–ù–ù–´–ï –í –¢–û –ñ–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï –ë–ï–ó –ó–ê–ö–†–´–¢–ò–Ø
    readStream.pipe(icecastSocket, { end: false });
    
    readStream.on('end', () => {
        console.log(`‚èπÔ∏è  –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${track.name}`);
        
        // –£–î–ê–õ–Ø–ï–ú –°–ö–ê–ß–ê–ù–ù–´–ô –¢–†–ï–ö –ü–û–°–õ–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø
        if (track.isDownloaded) {
            try {
                fs.unlinkSync(track.path);
                console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫: ${track.name}`);
                
                // –£–î–ê–õ–Ø–ï–ú –ò–ó –û–ß–ï–†–ï–î–ò
                audioFilesCache.splice(currentTrackIndex, 1);
                
                // –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú –ò–ù–î–ï–ö–° –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø
                if (currentTrackIndex >= audioFilesCache.length && audioFilesCache.length > 0) {
                    currentTrackIndex = 0;
                }
            } catch (err) {
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${track.path}:`, err);
            }
        } else {
            // –ü–ï–†–ï–•–û–î–ò–ú –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –¢–†–ï–ö–£
            currentTrackIndex = (currentTrackIndex + 1) % audioFilesCache.length;
        }
        
        // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–õ–ï–î–£–Æ–©–ò–ô –¢–†–ï–ö –í –¢–û –ñ–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï
        if (audioFilesCache.length > 0) {
            console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ...`);
            setTimeout(sendTrackToIcecast, 100); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        } else {
            isStreaming = false;
        }
    });
    
    readStream.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', err);
        
        // –ü–†–û–ü–£–°–ö–ê–ï–ú –ü–†–û–ë–õ–ï–ú–ù–´–ô –¢–†–ï–ö
        if (track.isDownloaded) {
            audioFilesCache.splice(currentTrackIndex, 1);
        } else {
            currentTrackIndex = (currentTrackIndex + 1) % audioFilesCache.length;
        }
        
        // –ü–ï–†–ï–•–û–î–ò–ú –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –¢–†–ï–ö–£
        if (audioFilesCache.length > 0) {
            setTimeout(sendTrackToIcecast, 100);
        } else {
            isStreaming = false;
        }
    });
}

async function addTrackToQueue(trackName) {
    console.log(`üéµ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: "${trackName}"`);
    
    try {
        const hasYtDlp = await checkYtDlp();
        if (!hasYtDlp) {
            throw new Error('yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        const videoUrl = await searchYouTube(trackName);
        if (!videoUrl) {
            console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        const isDuplicateInQueue = audioFilesCache.some(track => 
            track.sourceUrl && track.sourceUrl === videoUrl
        );
        
        const cacheFileName = await getCacheFileName(videoUrl);
        const cacheFilePath = path.join(CACHE_DIR, cacheFileName);
        const isAlreadyCached = fs.existsSync(cacheFilePath);
        
        if (isDuplicateInQueue) {
            console.log(`‚ö†Ô∏è  –¢—Ä–µ–∫ —Å —ç—Ç–∏–º URL —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏: ${videoUrl}`);
            return false;
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
        const filePath = await downloadYouTubeTrack(videoUrl, trackName);
        if (!filePath) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫');
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let durationMs = 180000;
        try {
            const metadata = await parseFile(filePath);
            durationMs = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        }
        
        const newTrack = {
            path: filePath,
            duration: durationMs,
            name: path.basename(filePath, path.extname(filePath)),
            isDownloaded: true,
            sourceUrl: videoUrl
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ü–û–°–õ–ï –¢–ï–ö–£–©–ï–ì–û –¢–†–ï–ö–ê
        const insertIndex = (currentTrackIndex + 1) % (audioFilesCache.length + 1);
        audioFilesCache.splice(insertIndex, 0, newTrack);
        
        console.log(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é ${insertIndex + 1}: ${newTrack.name}`);
        console.log(`üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${videoUrl}`);
        
        // –ï–°–õ–ò –£–ñ–ï –ò–î–ï–¢ –¢–†–ê–ù–°–õ–Ø–¶–ò–Ø - –ù–û–í–´–ô –¢–†–ï–ö –°–ê–ú –î–û–ñ–î–ï–¢–°–Ø –û–ß–ï–†–ï–î–ò
        if (!isStreaming && audioFilesCache.length > 0) {
            console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫');
            connectToIcecast();
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', error);
        return false;
    }
}

// –§–£–ù–ö–¶–ò–Ø –¢–û–õ–¨–ö–û –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–û–¢–û–ö–ê
function startStreaming() {
    if (audioFilesCache.length === 0) {
        console.log('‚è∏Ô∏è  –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å');
        return;
    }
    
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–¥–∏–æ-–ø–æ—Ç–æ–∫');
    connectToIcecast();
}

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(async (req, res) => {
    // POST —Ä–æ—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    if (req.url === '/add' && req.method === 'POST') {
        let body = '';
        
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', async () => {
            try {
                const { track } = JSON.parse(body);
                
                if (!track) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞' }));
                    return;
                }
                
                console.log(`üì® POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: "${track}"`);
                
                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                });
                
                res.end(JSON.stringify({ 
                    success: true, 
                    message: '–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å' 
                }));
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                setTimeout(async () => {
                    try {
                        await addTrackToQueue(track);
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞:', error);
                    }
                }, 100);
                
            } catch (error) {
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
        });
        
        return;
    }
    
    // OPTIONS –¥–ª—è CORS
    if (req.url === '/add' && req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        res.end();
        return;
    }

    // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
    if (req.url === '/stream.mp3') {
        const icecastUrl = `http://${SERVER_IP}:${ICECAST_PORT}/highrise-radio.mp3`;
        res.writeHead(302, {
            'Location': icecastUrl,
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive'
        });
        res.end();
        return;
    }

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
        <h1>üéß Highrise Radio</h1>
        <p>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ):</p>
        <input type="text" id="trackInput" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞">
        <button onclick="addTrack()">–î–æ–±–∞–≤–∏—Ç—å</button>
        <p id="status"></p>
        <audio controls>
            <source src="/stream.mp3" type="audio/mpeg">
        </audio>
        
        <script>
            async function addTrack() {
                const track = document.getElementById('trackInput').value;
                if (!track) return;
                
                const response = await fetch('/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ track })
                });
                
                const result = await response.json();
                document.getElementById('status').textContent = result.message;
                document.getElementById('trackInput').value = '';
            }
        </script>
    `);
});

// –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–†–ï–ö–ò –ò –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–¢–û–ö
getAudioFilesWithDurations().then(files => {
    audioFilesCache = files;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤`);
    
    console.log('\nüéµ –ü–æ—Ä—è–¥–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:');
    audioFilesCache.forEach((track, index) => {
        console.log(`${index + 1}. ${track.name} (${Math.round(track.duration / 1000)} —Å–µ–∫)`);
    });
    
    // –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–¢–û–ö –¢–û–õ–¨–ö–û –ï–°–õ–ò –ï–°–¢–¨ –¢–†–ï–ö–ò
    if (audioFilesCache.length > 0) {
        startStreaming();
    } else {
        console.log('\n‚ÑπÔ∏è  –ü–∞–ø–∫–∞ audio –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add');
    }
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤:', err);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}
üéß –ü–æ–¥–∫–ª—é—á–∏ –≤ Highrise: http://${SERVER_IP}:${ICECAST_PORT}/highrise-radio.mp3
‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫: POST http://${SERVER_IP}:${PORT}/add

üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏: ${AUDIO_DIR}
üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ IP: ${SERVER_IP}

üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏:
sudo apt update && sudo apt install icecast2 yt-dlp ffmpeg

‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Icecast (—Ñ–∞–π–ª /etc/icecast2/icecast.xml):
- source-password: ${ICECAST_PASSWORD}  // –î–û–õ–ñ–ï–ù –°–û–í–ü–ê–î–ê–¢–¨ –° –ö–û–î–û–ú
- –ü–æ—Ä—Ç: ${ICECAST_PORT}
- Mount point: /highrise-radio.mp3

‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Icecast: curl http://localhost:${ICECAST_PORT}/status.xsl
`);
});

process.on('SIGINT', () => {
    console.log('\nüõë –í—ã–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    
    // –ó–ê–ö–†–´–í–ê–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï –° ICECAST
    if (icecastSocket) {
        icecastSocket.end();
    }
    
    process.exit(0);
});