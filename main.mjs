import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import os from 'os';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const AUDIO_DIR = path.join(__dirname, 'audio');
const PORT = 8000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
function getServerIP() {
    const interfaces = os.networkInterfaces();
    for (const interfaceName of Object.keys(interfaces)) {
        for (const iface of interfaces[interfaceName]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

const SERVER_IP = getServerIP();

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
function getAudioFiles() {
    try {
        return fs.readdirSync(AUDIO_DIR)
            .filter(file => {
                const ext = path.extname(file).toLowerCase();
                return ['.mp3', '.wav', '.ogg'].includes(ext);
            })
            .map(file => path.join(AUDIO_DIR, file));
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ audio:', err);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
function getAudioDuration(filePath) {
    return new Promise((resolve) => {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –¥–ª—è MP3 –ø—Ä–∏–º–µ—Ä–Ω–æ 1MB = 1 –º–∏–Ω—É—Ç–∞
        // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ like 'music-metadata'
        fs.stat(filePath, (err, stats) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', err);
                resolve(180000); // 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return;
            }
            
            // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1MB ‚âà 1 –º–∏–Ω—É—Ç–∞ –º—É–∑—ã–∫–∏ (128kbps)
            const fileSizeMB = stats.size / (1024 * 1024);
            const durationMs = fileSizeMB * 60000; // 1MB = 60000ms (1 –º–∏–Ω—É—Ç–∞)
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            resolve(Math.max(30000, Math.min(durationMs, 600000))); // –æ—Ç 30 —Å–µ–∫ –¥–æ 10 –º–∏–Ω
        });
    });
}

// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
    const url = req.url;

    // === 1. –û–±—Å–ª—É–∂–∏–≤–∞–µ–º .pls –ø–ª–µ–π–ª–∏—Å—Ç ===
    if (req.url === '/radio.pls') {
        const plsContent = `[playlist]
NumberOfEntries=1
File1=http://${SERVER_IP}:${PORT}/stream.mp3
Title1=Highrise Radio
Length1=-1
Version=2
`;

        res.writeHead(200, { 
            'Content-Type': 'audio/x-scpls',
            'Cache-Control': 'no-cache'
        });
        res.end(plsContent);
        return;
    }

    // === 2. –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ ===
    if (req.url === '/stream.mp3') {
        console.log('[–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Ä–∞–¥–∏–æ');

        const files = getAudioFiles();
        if (files.length === 0) {
            res.writeHead(500, { 'Content-Type': 'text/plain' });
            res.end('–ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ "audio"');
            console.error('‚ùå –ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤!');
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–±–µ–∑ icy-*)
        res.writeHead(200, {
            'Content-Type': 'audio/mpeg',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'Transfer-Encoding': 'chunked'
        });

        let index = 0;
        let isSending = false;

        async function sendNextFile() {
            if (isSending) return;
            isSending = true;

            const filePath = files[index];
            const fileName = path.basename(filePath, path.extname(filePath));

            console.log(`üéµ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É: ${fileName}`);

            try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
                const duration = await getAudioDuration(filePath);
                console.log(`‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(duration / 1000)} —Å–µ–∫`);

                const readStream = fs.createReadStream(filePath);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
                readStream.pipe(res, { end: false });

                readStream.on('end', () => {
                    console.log(`‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${fileName}`);
                    index = (index + 1) % files.length;
                    
                    // –ñ–¥—ë–º –ø–æ–ª–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ
                    setTimeout(() => {
                        isSending = false;
                        sendNextFile();
                    }, duration);
                });

                readStream.on('error', (err) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
                    isSending = false;
                    if (!res.finished) {
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É
                        setTimeout(() => {
                            index = (index + 1) % files.length;
                            sendNextFile();
                        }, 1000);
                    }
                });

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                isSending = false;
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É
                index = (index + 1) % files.length;
                setTimeout(sendNextFile, 1000);
            }
        }

        // –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º
        sendNextFile();

        req.on('close', () => {
            console.log('üéß –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
            isSending = false;
        });

        return;
    }

    // === 3. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏) ===
    res.writeHead(200, { 
        'Content-Type': 'text/html; charset=utf-8',
        'Cache-Control': 'no-cache'
    });
    res.end(`
    <h1>üéß Highrise Radio</h1>
    <p>–ü–æ–¥–∫–ª—é—á–∏ –≤ Highrise:</p>
    <code>http://${SERVER_IP}:${PORT}/radio.pls</code>
    <br><br>
    <audio controls autoplay>
      <source src="/stream.mp3" type="audio/mpeg">
      –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
    </audio>
    <br>
    <a href="/radio.pls">–°–∫–∞—á–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç (.pls)</a>
  `);
});

server.listen(PORT, '0.0.0.0', () => {
    console.log(`
üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}
üéß –ü–æ–¥–∫–ª—é—á–∏ –≤ Highrise:
   –í–∞—Ä–∏–∞–Ω—Ç 1 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è): http://${SERVER_IP}:${PORT}/radio.pls
   –í–∞—Ä–∏–∞–Ω—Ç 2: http://${SERVER_IP}:${PORT}/stream.mp3

üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏: ${AUDIO_DIR}
üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ IP: ${SERVER_IP}
`);
});