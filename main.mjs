import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import os from 'os';
import { parseFile } from 'music-metadata';
import { exec } from 'child_process';
import { createConnection } from 'net';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const AUDIO_DIR = path.join(__dirname, 'audio');
const PORT = 8008;
const ICECAST_PORT = 8000;
const CACHE_DIR = path.join(__dirname, 'cache');
const ICECAST_PASSWORD = 'hackme';

let icecastSocket = null;
let icecastConnected = false;
let audioFilesCache = [];
let currentTrackIndex = 0;
let isStreaming = false;

if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫—ç—à–∞: ${CACHE_DIR}`);
}

function getServerIP() {
    const interfaces = os.networkInterfaces();
    for (const interfaceName of Object.keys(interfaces)) {
        for (const iface of interfaces[interfaceName]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

const SERVER_IP = getServerIP();

async function getCacheFileName(url) {
    const videoIdMatch = url.match(/v=([a-zA-Z0-9_-]{11})/);
    if (videoIdMatch && videoIdMatch[1]) {
        return `youtube_${videoIdMatch[1]}.mp3`;
    }
    const crypto = await import('crypto');
    const hash = crypto.createHash('md5').update(url).digest('hex');
    return `track_${hash}.mp3`;
}

async function checkYtDlp() {
    return new Promise((resolve) => {
        const checkCommands = [
            'test -f ~/yt-dlp && echo "home"',
            'which yt-dlp 2>/dev/null && echo "system"',
            'test -f /usr/local/bin/yt-dlp && echo "local"'
        ];
        exec(checkCommands.join(' || '), (error, stdout) => {
            if (stdout && stdout.trim()) {
                console.log(`‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω (${stdout.trim()})`);
                resolve(true);
            } else {
                console.log('‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:');
                console.log('wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O ~/yt-dlp && chmod +x ~/yt-dlp');
                resolve(false);
            }
        });
    });
}

async function searchYouTube(trackName) {
    try {
        const response = await fetch(`https://www.youtube.com/results?search_query=${encodeURIComponent(trackName)}`, {
            headers: { 'User-Agent': 'Mozilla/5.0' }
        });
        const html = await response.text();
        const match = html.match(/"videoId":"([^"]{11})"/);
        return match ? `https://www.youtube.com/watch?v=${match[1]}` : null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return null;
    }
}

async function downloadYouTubeTrack(videoUrl) {
    const cacheFileName = await getCacheFileName(videoUrl);
    const cacheFilePath = path.join(CACHE_DIR, cacheFileName);
    if (fs.existsSync(cacheFilePath)) return cacheFilePath;

    const ytDlpCommand = fs.existsSync(`${os.homedir()}/yt-dlp`) ? `${os.homedir()}/yt-dlp` : 'yt-dlp';
    const command = `${ytDlpCommand} -x --audio-format mp3 --audio-quality 0 -o "${cacheFilePath}" "${videoUrl}"`;

    return new Promise((resolve, reject) => {
        exec(command, { timeout: 120000 }, (error) => {
            error ? reject(error) : resolve(cacheFilePath);
        });
    });
}

async function scanDirectory(dir, isCached) {
    if (!fs.existsSync(dir)) return [];
    return (await fs.promises.readdir(dir))
        .filter(file => ['.mp3', '.wav', '.ogg', '.m4a', '.flac'].includes(path.extname(file).toLowerCase()))
        .map(file => path.join(dir, file))
        .map(async filePath => {
            try {
                const metadata = await parseFile(filePath);
                return {
                    path: filePath,
                    duration: Math.round(metadata.format.duration * 1000) || 180000,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                };
            } catch (error) {
                return {
                    path: filePath,
                    duration: 180000,
                    name: path.basename(filePath, path.extname(filePath)),
                    isDownloaded: isCached,
                    sourceUrl: isCached ? extractUrlFromCacheName(filePath) : null
                };
            }
        });
}

function extractUrlFromCacheName(filePath) {
    const match = path.basename(filePath).match(/youtube_([a-zA-Z0-9_-]{11})\.mp3/);
    return match ? `https://www.youtube.com/watch?v=${match[1]}` : null;
}

async function getAudioFilesWithDurations() {
    const [staticFiles, cachedFiles] = await Promise.all([
        scanDirectory(AUDIO_DIR, false),
        scanDirectory(CACHE_DIR, true)
    ]);
    return (await Promise.all([...staticFiles, ...cachedFiles])).filter(Boolean);
}

// =============== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö ICECAST ===============

function connectToIcecast() {
    if (icecastSocket) {
        icecastSocket.destroy();
        icecastSocket = null;
    }

    console.log(`üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Icecast: localhost:${ICECAST_PORT}`);
    icecastSocket = createConnection(ICECAST_PORT, 'localhost');

    let responseBuffer = '';

    icecastSocket
        .on('connect', () => {
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Icecast —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            const auth = Buffer.from(`source:${ICECAST_PASSWORD}`).toString('base64');
            const headers = [
                `SOURCE /highrise-radio.mp3 HTTP/1.0`,
                `Authorization: Basic ${auth}`,
                'Content-Type: audio/mpeg',
                'User-Agent: HighriseRadio/1.0',
                '',
                ''
            ].join('\r\n');
            icecastSocket.write(headers);
        })
        .on('data', (data) => {
            responseBuffer += data.toString();
            if (responseBuffer.includes('\r\n\r\n')) {
                const status = responseBuffer.split('\n')[0].trim();
                console.log(`üì® –û—Ç–≤–µ—Ç –æ—Ç Icecast: ${status}`);
                if (status.includes('200 OK')) {
                    console.log('üéâ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
                    icecastConnected = true;
                    isStreaming = true;
                    startNextTrack(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
                } else if (status.includes('401 Unauthorized')) {
                    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
                    icecastConnected = false;
                    setTimeout(connectToIcecast, 5000);
                }
            }
        })
        .on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ Icecast:', err.message);
            icecastConnected = false;
            isStreaming = false;
            setTimeout(connectToIcecast, 5000);
        })
        .on('close', () => {
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Icecast –∑–∞–∫—Ä—ã—Ç–æ');
            icecastConnected = false;
            isStreaming = false;
            setTimeout(connectToIcecast, 2000);
        });
}

// =============== –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–ö–ê –° –û–ñ–ò–î–ê–ù–ò–ï–ú –ü–û –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===============

function startNextTrack() {
    if (!isStreaming || !icecastConnected || audioFilesCache.length === 0) {
        console.log('‚è∏Ô∏è  –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        return;
    }

    currentTrackIndex = currentTrackIndex % audioFilesCache.length;
    const track = audioFilesCache[currentTrackIndex];

    console.log(`\nüéµ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–∫: ${track.name} (${Math.round(track.duration / 1000)} —Å–µ–∫)`);

    let fd;
    try {
        fd = fs.openSync(track.path, 'r');
    } catch (err) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å: ${track.path}`, err.message);
        currentTrackIndex = (currentTrackIndex + 1) % audioFilesCache.length;
        startNextTrack();
        return;
    }

    const chunkSize = 8192;
    const buffer = Buffer.alloc(chunkSize);
    
    // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    const startTime = Date.now();
    let totalBytesSent = 0;
    const bitrateKbps = 128; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 128 kbps
    const bytesPerSecond = (bitrateKbps * 1000) / 8; // 16000 –±–∞–π—Ç/—Å–µ–∫

    function sendNextChunk() {
        try {
            const bytesRead = fs.readSync(fd, buffer, 0, chunkSize, null);

            if (bytesRead > 0) {
                const chunk = buffer.slice(0, bytesRead);
                
                if (icecastSocket && icecastSocket.writable) {
                    icecastSocket.write(chunk);
                }

                totalBytesSent += bytesRead;

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫
                const expectedTimeMs = (totalBytesSent / bytesPerSecond) * 1000;
                const realElapsedTime = Date.now() - startTime;
                const delay = Math.max(0, expectedTimeMs - realElapsedTime);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
                setTimeout(sendNextChunk, delay);
            } else {
                // –§–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                fs.closeSync(fd);
                console.log(`‚èπÔ∏è  –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω: ${track.name}`);

                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
                if (track.isDownloaded) {
                    try {
                        fs.unlinkSync(track.path);
                        console.log(`üóëÔ∏è  –£–¥–∞–ª—ë–Ω: ${track.name}`);
                        audioFilesCache.splice(currentTrackIndex, 1);
                        if (currentTrackIndex >= audioFilesCache.length && audioFilesCache.length > 0) {
                            currentTrackIndex = 0;
                        }
                    } catch (err) {
                        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å:', err);
                    }
                } else {
                    currentTrackIndex = (currentTrackIndex + 1) % audioFilesCache.length;
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
                startNextTrack();
            }
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${track.name}:`, err.message);
            if (fd) fs.closeSync(fd);
            startNextTrack();
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    sendNextChunk();
}

// =============== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ï–ö–û–í ===============

async function addTrackToQueue(trackName) {
    const hasYtDlp = await checkYtDlp();
    if (!hasYtDlp) return false;

    const videoUrl = await searchYouTube(trackName);
    if (!videoUrl) return false;

    if (audioFilesCache.some(t => t.sourceUrl === videoUrl)) {
        console.log('‚ö†Ô∏è  –£–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏:', videoUrl);
        return false;
    }

    try {
        const filePath = await downloadYouTubeTrack(videoUrl);
        const metadata = await parseFile(filePath);
        const duration = metadata.format.duration ? Math.round(metadata.format.duration * 1000) : 180000;

        const newTrack = {
            path: filePath,
            duration,
            name: path.basename(filePath, path.extname(filePath)),
            isDownloaded: true,
            sourceUrl: videoUrl
        };

        const insertIndex = (currentTrackIndex + 1) % (audioFilesCache.length + 1);
        audioFilesCache.splice(insertIndex, 0, newTrack);

        console.log(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é ${insertIndex + 1}: ${newTrack.name}`);

        if (!isStreaming && audioFilesCache.length > 0) {
            console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫');
            connectToIcecast();
        }

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
        return false;
    }
}

// =============== –°–ï–†–í–ï–† ===============

const server = http.createServer(async (req, res) => {
    if (req.url === '/add' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => body += chunk.toString());
        req.on('end', async () => {
            try {
                const { track } = JSON.parse(body);
                if (!track) throw new Error('No track');

                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({ success: true, message: '–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å' }));

                setTimeout(() => addTrackToQueue(track), 100);
            } catch (error) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'Invalid request' }));
            }
        });
        return;
    }

    if (req.url === '/add' && req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        res.end();
        return;
    }

    if (req.url === '/stream.mp3') {
        res.writeHead(302, { 'Location': `http://${SERVER_IP}:${ICECAST_PORT}/highrise-radio.mp3` });
        res.end();
        return;
    }

    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
        <h1>üéß Highrise Radio</h1>
        <input type="text" id="trackInput" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞">
        <button onclick="addTrack()">–î–æ–±–∞–≤–∏—Ç—å</button>
        <p id="status"></p>
        <audio controls src="/stream.mp3"></audio>
        <script>
            async function addTrack() {
                const track = document.getElementById('trackInput').value;
                if (!track) return;
                const res = await fetch('/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ track })
                });
                const data = await res.json();
                document.getElementById('status').textContent = data.message;
                document.getElementById('trackInput').value = '';
            }
        </script>
    `);
});

// =============== –ó–ê–ü–£–°–ö ===============

getAudioFilesWithDurations().then(files => {
    audioFilesCache = files;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Ç—Ä–µ–∫–æ–≤`);
    if (files.length > 0) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–¥–∏–æ');
        connectToIcecast();
    } else {
        console.log('‚ÑπÔ∏è  –ü–∞–ø–∫–∞ audio –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–∫–∏ —á–µ—Ä–µ–∑ /add');
    }
});

server.listen(PORT, '0.0.0.0', () => {
    console.log(`
üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://${SERVER_IP}:${PORT}
üéß –ü–æ—Ç–æ–∫: http://${SERVER_IP}:${ICECAST_PORT}/highrise-radio.mp3

üí° –£–±–µ–¥–∏—Ç–µ—Å—å –≤ icecast.xml:
   - source-password: ${ICECAST_PASSWORD}
   - bind-address: 0.0.0.0
   - port: ${ICECAST_PORT}
   - mount: /highrise-radio.mp3
`);
});

process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    if (icecastSocket) icecastSocket.destroy();
    process.exit(0);
});